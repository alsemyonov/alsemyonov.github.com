#!/usr/bin/env ruby

return unless __FILE__ == $0

require 'dotenv'
require 'linkedin'
require 'yaml'
require 'pathname'
require 'active_support'
require 'active_support/core_ext'

Dotenv.load('.env')

ROOT = Pathname.new(File.expand_path('../..', __FILE__))
EXPERIENCE_FILE = ROOT.join('data/cv/experience.yml')

@data = File.exist?(EXPERIENCE_FILE) ? YAML.load(File.read(EXPERIENCE_FILE)) : []

@client = LinkedIn::Client.new(ENV['LINKEDIN_APP_ID'], ENV['LINKEDIN_APP_SECRET'])
# If you want to use one of the scopes from linkedin you have to pass it in at this point
# You can learn more about it here: http://developer.linkedin.com/documents/authentication
request_token = @client.request_token({}, scope: 'r_basicprofile r_emailaddress')

# to test from your desktop, open the following url in your browser
# and record the pin it gives you
puts request_token.authorize_url
pin = gets.chomp unless ENV['CLEANUP']

if pin.present?
  # then fetch your access keys
  atoken, asecret = @client.authorize_from_request(request_token.token, request_token.secret, pin)
  puts [atoken, asecret].inspect

  # or authorize from previously fetched access keys
  @client.authorize_from_access(atoken, asecret)

  profile = @client.profile(url: "https://linkedin.com/in/#{ENV['LINKEDIN_PROFILE']}", fields: %w(positions three-past-positions))
  profile.positions.all.each do |new_position|
    existing_position = @data.find { |pos| pos['id'].to_s == new_position.id.to_s }
    if existing_position
      existing_position.merge!(new_position.to_hash)
    else
      @data << new_position.to_hash
    end
  end
end

@data.each do |position|
  case position['start_date']
  when Hash
    position['start_date'] = Date.new(*position['start_date'].fetch_values('year', 'month'))
  when String
    position['start_date'] = Date.parse(position['start_date'])
  end
end
@data = @data.uniq.compact.sort_by do |position|
  [-position['start_date'].to_time.to_i, -position['end_date'].try(:to_time).to_i, position['title']]
end

File.write(EXPERIENCE_FILE, YAML.dump(@data))

require 'irb'
IRB.start
