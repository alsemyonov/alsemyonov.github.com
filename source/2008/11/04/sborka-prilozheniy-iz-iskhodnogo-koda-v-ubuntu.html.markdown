---
date: 2008-11-04 05:05
title: Сборка приложений из исходного кода в Ubuntu
slug: sborka-prilozheniy-iz-iskhodnogo-koda-v-ubuntu
type: post
tags: auto-apt, checkinstall, configure, make, Ubuntu
category: Ubuntu
---

Вообще, в производных от Debian системах, в число которых входит и Ubuntu, не принято собирать приложения из исходных кодов. Этого, зачастую, можно избежать, потому как в репозиториях полно различных приложений, на все случаи жизни. По некоторым сведениям, их больше, чем во всех остальных распространённых дистрибутивах линукса.

Два простых пути для установки приложений из меню, мышкой:
<ul>
	<li><strong>Приложения</strong> → <strong>Установка/удаление…</strong></li>
	<li><strong>Система</strong> → <strong>Админинстрирование</strong> → <strong>Программа управления пакетами Synaptic</strong></li>
</ul>
В первом интерфейсе все приложения снабжены своей иконкой, а так же небольшим сопроводительным текстом-описанием и рейтингом (статистика собирается анонимно со всех пользователей, которые разрешили использовать их данные). Во втором интерфейсе есть <strong>абсолютно все</strong> пакеты, однако в нём проще запутаться и поставить или удалить не то, что требуется.

Однако, бывают случаи, когда необходимое вам приложение отсутствует в репозитории, например потому, что оно ещё не стабильно, либо распространяется <strong>только</strong> в исходных кодах, либо его написал ваш сосед-программист, ну или по какой-то другой причине. Тогда придётся собирать его из исходников. Если вы обратитесь к любому руководству по сборке приложений, вы увидите три строки, известных (почти) любому пользователю линукса со стажем более полугода. А именно:
<pre lang="bash">./configure
make
sudo make install</pre>
Кратко о каждой из этих команд
<h2>./configure</h2>
Эта команда подготавливает исходные коды к компиляции под конкретную платформу, а именно в вашей операционной системе. Она проверяет налицие необходимых программ (компиляторов, сборщиков и т. п.), библиотек, а так же заголовочных файлов (something.h). Достаточно часто случается, что в вашей системе недостаёт какого-нибудь необходимого приложения, либо файла заголовков, необходимого для компиляции программы. В таком случае, эта команда выведет сообщение об ошибке. Если у вас достаточный опыт, то вы, конечно же, легко определите, что заголовочный файл some_extra_thing.h находится в пакете extra_things_for_cool_nerds-dev, однако не всегда просто определить, что именно хочет от вас программа, чего ей не хватает.

Тогда нам на помощь придёт утилита под названием <a href="apt://auto-apt"><strong>auto-apt</strong></a>. Она хранит информацию о заголовочных файлах, которые имеются в репозиториях и поможет вам найти, в каком пакете хранится тот или иной заголовочный файл.

Если ./configure вывела вам сообщение о недостаче заголовочного файла <em>Xlib.h</em>, воспользуйтесь командой
<pre lang="bash">auto-apt search Xlib.h</pre>
Она ответит вам следующим:
<pre lang="bash">usr/include/X11/Xlib.h	libdevel/libx11-dev</pre>
Это обозначает, что нужный вам файл содержится в пакете libx11-dev, относящемся к категории libdevel (пакеты для разработки) и после установки пакета (<strong>sudo apt-get install libx11-dev</strong>) будет лежать по адресу usr/include/X11/Xlib.h

Есть ещё более простой путь вызова ./configure, который сам предложит вам установить все необходимые пакеты
<pre lang="bash">auto-apt run ./configure</pre>
Вам нужно будет только следить за процессом установки и изредка нажимать <strong>Y</strong> для установки необходимых пакетов.
<h2>make</h2>
Это вторая и, пожалуй, главная команда из этой триады. Она выполняет компиляцию и сборку всех необходимых компонентов системы. Если ошибка появляется во время выполнения этой команды, скорее всего ошибка в коде, который вы пытаетесь собрать. В таком случае, остаётся только обратиться к разработчику программы. Но обычно, после успешного выполнения ./configure, здесь ошибок не бывает.
<h2>make install</h2>
Этой командой вы устанавливаете приложение. Если вы хотите установить её для всех пользователей, общесистемно, вам необходимы права пользователя <strong>root</strong>. В Ubuntu это решается вызовом этой команды после <strong>sudo</strong>, то есть
<pre lang="bash">sudo make install</pre>
<strong>НО! При установке этим путём, вы можете нарушить целостность системы, поскольку эта команда не сохранит данные о том, какие файлы и куда были установлены.</strong> Таким образом, удаление этой программы сможет принести вам много мороки. Чтобы облегчить возможноые страдания, была написана утилита под названием <a href="apt://checkinstall"><strong>checkinstall</strong></a>. Она проверяет, что и как хочет сделать команда <strong>make install</strong>, а потом собирает по полученным сведениям deb-пакет и устанавливает его в систему (то есть, для удачного выполнения этой команды ей так же нужны права суперпользователя). Благодаря этому, вы сможете потом легко удалить ненужное вам более приложение, используя например Synaptic, упоминавшийся в начале статьи.
<h2>Установка программ в пользовательский каталог</h2>
Бывает, что некоторые программы не нужны общесистемно, тогда нужно на этапе конфигурирования указать, что программа будет устанавливаться в пользовательский (или иной) каталог. Для этого, обычно, первая команда видоизменяется следующим образом:
<pre lang="bash">./configure --prefix=/home/$USER</pre>
Тогда команду <strong>make install</strong> нужно вызывать без префикса <strong>sudo</strong>.
<h2>Выводы</h2>
Для упрощения установки программы из исходных кодов, в Ubuntu вы можете воспользоваться немного изменённым набором команд:
<pre lang="bash">auto-apt run ./configure
make
sudo checkinstall</pre>
для установки общесистемной, либо:
<pre lang="bash">auto-apt run ./configure --prefix=/home/$USER
make
make install</pre>
для установки в пользовательский каталог.
